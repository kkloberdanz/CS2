#include <iostream>

#define SIZE_OF_INT 16
#define SIZE 10

using namespace std;

class Linked_list{
    private:
        int vertex;
        int successor;
        int count;
        Linked_list* next;
    public:
        // Constructor
        Linked_list();

        // void member functions
        void insert(int, int);
        void printList(bool); 
        void decrement_count() { count--; }
        void topological_sort(Linked_list*);
        void remove_vertex();

        // getters and setters
        int getCount() { return count; }
        void setCount(int n) { count = n; }
        int getVertex() { return vertex; }
        void setVertex(int v) { vertex = v; }
};

// implementation
Linked_list::Linked_list(){
    vertex = 0;
    successor = 0;
    count = 0;
    next = NULL;
}


void Linked_list::insert(int v, int s){
    Linked_list* currentNode = this;

    // ensures that insertion takes place at the end of the list
    while( currentNode->next != NULL ){
        currentNode = currentNode->next;
    }

    currentNode->vertex = v;
    currentNode->successor = s;
    currentNode->next = new Linked_list;

    // advances the current Linked_list to next Linked_list
    currentNode = currentNode->next;

    // assigns the pointer "next" for the newly created Linked_list to NULL
    currentNode->next = NULL;
}


void Linked_list::printList(bool verteces_only = false){
    Linked_list* currentNode = this;

    if( verteces_only ){
        while( currentNode->next != NULL ){
            cout << currentNode->vertex << endl;
            currentNode = currentNode->next;
        }
    } else {
        while( currentNode->next != NULL ){
            cout << "(" << currentNode->vertex << ", " << currentNode->successor << ")" << endl;
            currentNode = currentNode->next;
        }
        cout << "count = " << currentNode->count << endl;
    }
}

void Linked_list::remove_vertex(){
    Linked_list* current_vertex = this;
    current_vertex->vertex = -1;
    current_vertex->count = -1;
    current_vertex->successor = -2;
    delete current_vertex->next;
    current_vertex->next = NULL;
}

/*
 * Find a vertex that has a counter field of 0 (zero)
 * Output the vertex whose count is 0
 * Decrease the counter field by 1 of the vertex that the link field points to
 * remove the vertex
 * Continue until all verteces are gone
 */

void Linked_list::topological_sort(Linked_list v[]){
    int i;
    bool zero_found = false;

    // finds which of the verteces has no links to it
    for( i = 1; i < SIZE; i++ ){
        if( v[i].getCount() <= 0 ){
            zero_found = true;
            break;
        }
    }

    if( zero_found ){
        // prints all the verteces from the given list
        while( v[i].next != NULL ){
            cout << v[i].vertex << endl;
            v[ v[i].successor ].decrement_count();
            v[i].next = v[i].next->next;
        } 
        v[ v[i].successor ].decrement_count();

        /*
        int j;
        for( j = 1; j < SIZE; j++ ){
            cout << "vertex " << j << endl;
            v[j].printList();
            cout << endl;
        }
        */ 

        v[i].remove_vertex();
        v[i].count = 9999999;
    } else {
        return;
    }

    // recursicly calls until no more zeros are found
    v->topological_sort(v); 
}
/*  This almost works:
    int i;
    bool zero_found = false;


    // finds which of the verteces has no links to it
    for( i = 1; i < SIZE; i++ ){
        if( v[i].getCount() <= 0 ){
            zero_found = true;
            break;
        }
    }

    if( zero_found ){
        // prints all the verteces from the given list
        while( v[i].next != NULL ){
            cout << v[i].vertex << endl;
            v[ v[i].successor ].decrement_count();
            v[i].next = v[i].next->next;
            //cout << v[i].next->vertex << endl;
        } 
        //v[i].decrement_count();
        v[i].count = 9999999;

        int j;
        for( j = 1; j < SIZE; j++ ){
            cout << "vertex " << j << endl;
            v[j].printList();
            cout << endl;
        }


       //v[i].remove_vertex();
    } else {
        return;
    }

    // recursicly calls until no more zeros are found
    v->topological_sort(v); 
 */
int main(){

    Linked_list vertex[SIZE];

    vertex[1].insert(1, 3);
    vertex[1].setCount(0);

    vertex[2].insert(2, 8);
    vertex[2].setCount(1);

    vertex[3].insert(3, 7);
    vertex[3].setCount(1);

    vertex[4].insert(4, 6);
    vertex[4].setCount(1);

    vertex[5].insert(5, 8);
    vertex[5].setCount(2);

    vertex[6].setCount(0);

    vertex[7].insert(7, 4);
    vertex[7].insert(7, 5);
    vertex[7].setCount(1);

    vertex[8].insert(8, 6);
    vertex[8].setCount(2);

    vertex[9].insert(9, 2);
    vertex[9].insert(9, 5);
    vertex[9].setCount(0);

    cout << "The verteces are as follows: " << endl;

    int i;
    for( i = 1; i < SIZE; i++ ){
        cout << "vertex " << i << endl;
        vertex[i].printList();
        cout << endl;
    }


    cout << "Generating Path ..." << endl;

    vertex->topological_sort(vertex);


    /*
    // For testing the linked list
    Linked_list* myList = new Linked_list;
    myList->insert(1, 3);
    myList->insert(3, 7);
    myList->insert(7, 5);
    myList->insert(5, 8);

    myList->printList();
    delete myList;
    */

    return 0;
}
